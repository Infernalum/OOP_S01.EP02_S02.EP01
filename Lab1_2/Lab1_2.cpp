
#include "Lab1_2.h"


const char* msgs[] = { "0. Выйти",
"1. Ввести новые координаты вершины",
"2. Ввести новые границы цепи",
"3. Вернуть ординату цепной линии по значению абсциссы",
"4. Вернуть длину дуги цепной линии от ее проекции на оси абсцисс",
"5. Вернуть радиус кривизны цепной линии относительно координаты по оси абсцисс",
"6. Вернуть координаты центра кривизны цепной линии в декартовой системе координат относительно координаты по оси абсцисс",
"7. Вернуть площадь криволинейной трапеции, образованной цепной линией и ее проекцией на ось абсцисс (длина проекции = разности абсцисс границ)" };

const int NMsgs = sizeof(msgs) / sizeof(msgs[0]);


namespace Lab1_2 {

	// Выбор номера альтернативы
	int dialog(const char* msgs[], int N) {
		const char* errmsgs = "";
		int rc, i;
		do {
			puts(errmsgs);
			errmsgs = "Ошибка! Повторите ввод!";
			for (i = 0; i < N; ++i)					// Вывод списка альтернатив
				puts(msgs[i]);
			printf("Выберите: --> ");
		} while (getNum(rc) < 0 || rc >= N);
		return rc;
	}


	// "1. Ввести новые координаты вершины"
	int D_SetPoint(Class::Catenary& C) {


		return 1;
	}

	// "2. Ввести новые границы цепи"
	int D_SetBorders(Class::Catenary& C) {


		return 1;
	}

	// "3. Вернуть ординату цепной линии по значению абсциссы",
	int D_GetOrdinate(Class::Catenary& C) {


		return 1;
	}

	// "4. Вернуть длину дуги цепной линии от ее проекции на оси абсцисс"
	int D_GetLength(Class::Catenary& C) {


		return 1;
	}

	// "5. Вернуть радиус кривизны цепной линии относительно координаты по оси абсцисс"
	int D_GetRadius(Class::Catenary& C) {


		return 1;
	}

	// "6. Вернуть координаты центра кривизны цепной линии в декартовой системе координат относительно координаты по оси абсцисс"
	int D_GetCenter(Class::Catenary& C) {


		return 1;
	}

	//"7. Вернуть площадь криволинейной трапеции, образованной цепной линией и ее проекцией на ось абсцисс (длина проекции = разности абсцисс границ)"
	int D_GetArea(Class::Catenary&) {


		return 1;
	}

}

